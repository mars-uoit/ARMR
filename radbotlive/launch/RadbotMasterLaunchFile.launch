<launch>
  <arg name="sim" default="false"/>
  <arg name="robot" value="jackal" unless="$(arg sim)"/>
  <arg name="robot" value="sim" if="$(arg sim)"/>
  <env name="ROBOT" value="$(arg robot)"/>
  <include file="$(find radbotlive)/launch/$(arg robot).machine"/>
  <include file="$(find jackal_gazebo)/launch/jackal_world.launch" if="$(arg sim)">
    <arg name="front_laser" value="true"/>
  </include>
  <include file="$(find radbot_viz)/launch/view_radbot.launch"/>
  <node machine="c1" pkg="radbot_control" type="radbot_control_node" name="radbot_control_node" output="screen">
    <param name="num_particles" type="int" value="100"/>
    <param name="num_samples" type="int" value="30"/> #number of measurments to average
    <param name="marker_frame" type="string" value="map"/>
      <rosparam ns="rad_costmap" subst_value="true">
            footprint: [[0.1, 0.0], [0.0, 0.1], [-0.1, 0.0], [0.0, -0.1]]
            robot_radius: 0.10

            transform_tolerance: 1.0 #default 0.5
            update_frequency: 1.0
            publish_frequency: 1.0

            #must match incoming static map
            global_frame: map
            robot_base_frame: base_link
            resolution: 0.05

            rolling_window: false
            track_unknown_space: true

            plugins:

                - {name: static,           type: "costmap_2d::StaticLayer"}
                - {name: RadLayer,         type: "radbot_control::RadLayer"}

            static:
                #Can pull data from gmapping, map_server or a non-rolling costmap
                #map_topic: /map
                map_topic: move_base/global_costmap/costmap
                subscribe_to_updates: false
            RadLayer:
                max_counts: 50000
                shepard_power: 2.0
                measure_dist: 0.3

      </rosparam>
  </node>
  <node machine="c1" pkg="radbot_processor" type="radbot_processor_node" name="radbot_processor_node" output="screen">
    <param name="global_frame" type="string" value="map"/>
    <param name="topic" type="string" value="/ursa_node/counts"/>
  </node> 

  <node pkg="tf" type="static_transform_publisher" name="link1_broadcaster" args="0 0 .28 0 0 0 1 rear_mount rad_link 100" />

  <!--<node pkg="radbot_src_sim" type="radbot_src_sim_node"
    name="radbot_src_sim_node" output="screen">

    <param name="global_frame" value="map"/>

    <param name="x1" value="3.5"/>
    <param name="y1" value="-1"/>
    <param name="rad_strength1" value="50000"/>

    <param name="x2" value="2.5"/>
    <param name="y2" value="-3.5"/>
    <param name="rad_strength2" value="20000"/>

    <param name="x3" value="0"/>
    <param name="y3" value="0"/>
    <param name="rad_strength3" value="0"/>

    <param name="x4" value="0"/>
    <param name="y4" value="0"/>
    <param name="rad_strength4" value="0"/>

  </node> -->
    <node machine="c2" pkg="ursa_driver" type="ursa_node" name="ursa_node" respawn="true" output="screen">

      <param name="port" value="/dev/ttyUSB0"/>
      <param name="use_GM_mode" value="true"/>
      <param name="imeadiate_mode" value="true"/>

      <param name="load_previous_settings" value="false"/>

      <param name="high_voltage" value="900"/>
      <param name="gain" value="70"/>
      <param name="threshold" value="100"/>
      <param name="shaping_time" value="1"/>
      <param name="input_and_polarity" value="input1_negative"/>
      <param name="ramping_time" value="6"/>
  </node> 
</launch>

